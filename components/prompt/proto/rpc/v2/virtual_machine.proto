syntax = "proto3";
package rafay.dev.debug.rpc.v2;

option go_package = "v2";

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options/annotations.proto";
import "github.com/RafaySystems/rafay-common/pkg/types/v2/types.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {
    title : "Approval Service"
    version : "2.0"
    contact : {name : "Rafay Dev"}
  }
  schemes : HTTPS
  consumes : "application/json"
  consumes : "application/yaml"
  produces : "application/json"
  produces : "application/yaml"
  security_definitions : {
    security : {
      key : "BasicAuth"
      value : {type : TYPE_BASIC}
    }
    security : {
      key : "ApiKeyAuth"
      value : {type : TYPE_API_KEY in : IN_HEADER name : "X-RAFAY-API-KEYID"}
    }
  }
  security : {
    security_requirement : {
      key : "BasicAuth"
      value : {}
    }
    security_requirement : {
      key : "ApiKeyAuth"
      value : {}
    }
  }
  responses : {
    key : "403"
    value : {
      description : "Returned when the user does not have permission to access "
                    "the resource."
    }
  }
  responses : {
    key : "404"
    value : {
      description : "Returned when the resource does not exist."
      schema : {json_schema : {type : STRING}}
    }
  }
};

message VMRequest {
    rafay.dev.common.types.v2.RafayMeta metadata = 1 [
        (gogoproto.embed) = true,
        (gogoproto.nullable) = false,
        (gogoproto.jsontag) = ",inline"
        ];
    string VMName = 2;
    string namespace = 3;
}

message VMResponse {
  string output = 1;
}

service VirtualMachine {
  rpc StartVM(VMRequest)
      returns (VMResponse) {
    option (google.api.http) = {
      post : "/v2/debug/{metadata.urlScope=project/*}/cluster/{metadata.name}/vm/{VMName}/"
          "start"
      body : "*"
    };
  };

  rpc StopVM(VMRequest)
      returns (VMResponse) {
    option (google.api.http) = {
      post : "/v2/debug/{metadata.urlScope=project/*}/cluster/{metadata.name}/vm/{VMName}/"
          "stop"
      body : "*"
    };
  };

  rpc RestartVM(VMRequest)
      returns (VMResponse) {
    option (google.api.http) = {
      post : "/v2/debug/{metadata.urlScope=project/*}/cluster/{metadata.name}/vm/{VMName}/"
          "restart"
      body : "*"
    };
  };

  rpc PauseVM(VMRequest)
      returns (VMResponse) {
    option (google.api.http) = {
      post : "/v2/debug/{metadata.urlScope=project/*}/cluster/{metadata.name}/vm/{VMName}/"
          "pause"
      body : "*"
    };
  };

  rpc UnpauseVM(VMRequest)
      returns (VMResponse) {
    option (google.api.http) = {
      post : "/v2/debug/{metadata.urlScope=project/*}/cluster/{metadata.name}/vm/{VMName}/"
          "unpause"
      body : "*"
    };
  };
}