// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: virtual_machine.proto

package v2

import (
	context "context"
	fmt "fmt"
	v2 "github.com/RafaySystems/rafay-common/pkg/types/v2"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VMRequest struct {
	v2.RafayMeta `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:",inline"`
	VMName       string `protobuf:"bytes,2,opt,name=VMName,proto3" json:"VMName,omitempty"`
	Namespace    string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *VMRequest) Reset()         { *m = VMRequest{} }
func (m *VMRequest) String() string { return proto.CompactTextString(m) }
func (*VMRequest) ProtoMessage()    {}
func (*VMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0312cad0ca872dab, []int{0}
}
func (m *VMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMRequest.Merge(m, src)
}
func (m *VMRequest) XXX_Size() int {
	return m.Size()
}
func (m *VMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VMRequest proto.InternalMessageInfo

func (m *VMRequest) GetVMName() string {
	if m != nil {
		return m.VMName
	}
	return ""
}

func (m *VMRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (*VMRequest) XXX_MessageName() string {
	return "rafay.dev.debug.rpc.v2.VMRequest"
}

type VMResponse struct {
	Output string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *VMResponse) Reset()         { *m = VMResponse{} }
func (m *VMResponse) String() string { return proto.CompactTextString(m) }
func (*VMResponse) ProtoMessage()    {}
func (*VMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0312cad0ca872dab, []int{1}
}
func (m *VMResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMResponse.Merge(m, src)
}
func (m *VMResponse) XXX_Size() int {
	return m.Size()
}
func (m *VMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VMResponse proto.InternalMessageInfo

func (m *VMResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (*VMResponse) XXX_MessageName() string {
	return "rafay.dev.debug.rpc.v2.VMResponse"
}
func init() {
	proto.RegisterType((*VMRequest)(nil), "rafay.dev.debug.rpc.v2.VMRequest")
	golang_proto.RegisterType((*VMRequest)(nil), "rafay.dev.debug.rpc.v2.VMRequest")
	proto.RegisterType((*VMResponse)(nil), "rafay.dev.debug.rpc.v2.VMResponse")
	golang_proto.RegisterType((*VMResponse)(nil), "rafay.dev.debug.rpc.v2.VMResponse")
}

func init() { proto.RegisterFile("virtual_machine.proto", fileDescriptor_0312cad0ca872dab) }
func init() { golang_proto.RegisterFile("virtual_machine.proto", fileDescriptor_0312cad0ca872dab) }

var fileDescriptor_0312cad0ca872dab = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x41, 0x6b, 0x24, 0x45,
	0x14, 0xc7, 0xa7, 0x3a, 0x92, 0x64, 0x6a, 0x71, 0x5d, 0x5b, 0x5c, 0x43, 0x58, 0x3a, 0x6d, 0x13,
	0x61, 0x09, 0x76, 0xd7, 0xd2, 0x9b, 0x83, 0x44, 0xf6, 0x30, 0x61, 0x55, 0xc2, 0x32, 0x32, 0xf6,
	0x90, 0x61, 0x77, 0x15, 0xa5, 0xa6, 0xe6, 0x6d, 0x4f, 0xaf, 0xdd, 0x55, 0x65, 0x55, 0x75, 0xc7,
	0x61, 0xc9, 0x45, 0x8f, 0x5e, 0x44, 0x2f, 0xe2, 0x67, 0x10, 0x0f, 0x7e, 0x02, 0x8f, 0x39, 0x06,
	0xbc, 0x08, 0x42, 0x90, 0x8c, 0x27, 0x3f, 0x85, 0x74, 0xf5, 0x4c, 0x32, 0x4b, 0x16, 0x4f, 0x23,
	0x78, 0xeb, 0xf7, 0xfa, 0xff, 0xfe, 0xf5, 0x7b, 0xaf, 0x8a, 0x87, 0x5f, 0xaf, 0x32, 0x65, 0x4a,
	0x9a, 0x7f, 0x56, 0x50, 0x36, 0xce, 0x38, 0x44, 0x52, 0x09, 0x23, 0xdc, 0x9b, 0x8a, 0x3e, 0xa1,
	0x93, 0x68, 0x04, 0x55, 0x34, 0x82, 0x61, 0x99, 0x46, 0x4a, 0xb2, 0xa8, 0x8a, 0x37, 0x6f, 0xa5,
	0x42, 0xa4, 0x39, 0x10, 0x2a, 0x33, 0x42, 0x39, 0x17, 0x86, 0x9a, 0x4c, 0x70, 0xdd, 0x54, 0x6d,
	0x86, 0x69, 0x66, 0xc6, 0xe5, 0x30, 0x62, 0xa2, 0x20, 0xa9, 0x48, 0x05, 0xb1, 0xe9, 0x61, 0xf9,
	0xc4, 0x46, 0x36, 0xb0, 0x5f, 0x33, 0x79, 0x7f, 0x51, 0xae, 0x24, 0x0b, 0x81, 0x09, 0x3d, 0xd1,
	0x06, 0x66, 0x61, 0x4a, 0x0d, 0x1c, 0xd1, 0x49, 0xe3, 0xc2, 0xc2, 0x14, 0x78, 0xa8, 0x8f, 0x68,
	0x9a, 0x82, 0x22, 0x42, 0xda, 0x73, 0x5f, 0xc0, 0x70, 0x6f, 0xc1, 0x34, 0xa9, 0x9b, 0xe8, 0x5b,
	0x47, 0x4d, 0x6c, 0x47, 0x21, 0x13, 0x45, 0x21, 0x38, 0x91, 0x9f, 0xa7, 0xc4, 0x4c, 0x24, 0x68,
	0x52, 0xc5, 0xcd, 0x47, 0x53, 0x1e, 0xfc, 0x80, 0x70, 0x7b, 0xd0, 0x4d, 0xe0, 0x8b, 0x12, 0xb4,
	0x71, 0x0f, 0xf1, 0x7a, 0x01, 0x86, 0x8e, 0xa8, 0xa1, 0x1b, 0xc8, 0x47, 0xb7, 0xaf, 0xc5, 0xdb,
	0xd1, 0xe5, 0x64, 0x1a, 0xaf, 0xa8, 0x29, 0xaf, 0xe2, 0xc8, 0x1e, 0xd7, 0x05, 0x43, 0xf7, 0x5f,
	0x3b, 0x39, 0xdb, 0x6a, 0x9d, 0x9e, 0x6d, 0xa1, 0xbf, 0xcf, 0xb6, 0xd6, 0xde, 0xce, 0x78, 0x9e,
	0x71, 0x48, 0x2e, 0xac, 0xdc, 0x9b, 0x78, 0x75, 0xd0, 0xfd, 0x90, 0x16, 0xb0, 0xe1, 0xf8, 0xe8,
	0x76, 0x3b, 0x99, 0x45, 0xee, 0x2d, 0xdc, 0xe6, 0xb4, 0x00, 0x2d, 0x29, 0x83, 0x8d, 0x15, 0xfb,
	0xeb, 0x32, 0x11, 0x6c, 0x63, 0x5c, 0x93, 0x69, 0x29, 0xb8, 0x86, 0xda, 0x43, 0x94, 0x46, 0x96,
	0xc6, 0x82, 0xb5, 0x93, 0x59, 0x14, 0x7f, 0xb3, 0x86, 0xaf, 0x0f, 0x9a, 0x3b, 0xed, 0x36, 0x57,
	0xea, 0xfe, 0x8c, 0xf0, 0x5a, 0xdf, 0x50, 0x65, 0x06, 0x5d, 0xf7, 0xcd, 0xe8, 0xc5, 0x37, 0x1b,
	0x5d, 0x34, 0xbd, 0x19, 0xfc, 0x9b, 0xa4, 0x39, 0x3d, 0xf8, 0xe4, 0xab, 0xdf, 0xfe, 0xfa, 0xde,
	0x19, 0x04, 0x1f, 0xd5, 0xf3, 0xb3, 0x22, 0xf2, 0x6c, 0xde, 0x5e, 0x54, 0xaa, 0xbc, 0xcf, 0x84,
	0x84, 0x7b, 0x52, 0x89, 0xa7, 0xc0, 0x0c, 0xd9, 0x39, 0x26, 0x2c, 0x2f, 0xb5, 0x01, 0xb5, 0xa0,
	0xaa, 0x1b, 0x3b, 0x26, 0x55, 0x41, 0x9e, 0x35, 0xdd, 0x1f, 0x13, 0x5d, 0x33, 0xee, 0xa1, 0x1d,
	0xf7, 0x27, 0x84, 0x57, 0xfb, 0x46, 0xc8, 0xe5, 0xf1, 0x7e, 0x6c, 0x79, 0x0f, 0x83, 0xde, 0x72,
	0x79, 0x85, 0xac, 0x71, 0x7f, 0x41, 0xb8, 0x9d, 0x80, 0x5e, 0xee, 0x84, 0x3f, 0xb5, 0xc4, 0x0f,
	0x83, 0xfe, 0x32, 0x89, 0x15, 0x5c, 0xcc, 0xb8, 0x7e, 0x14, 0x3d, 0x5a, 0x6a, 0xf8, 0x9f, 0x3f,
	0x0a, 0x59, 0x33, 0xce, 0xa7, 0x7c, 0xc8, 0xe5, 0x72, 0x91, 0xff, 0x93, 0x29, 0x97, 0x7c, 0x0e,
	0xbd, 0xff, 0xf5, 0xca, 0x77, 0x9d, 0x3f, 0x1c, 0x77, 0x1b, 0xdf, 0xe8, 0x48, 0xa9, 0x44, 0x45,
	0x73, 0xbf, 0x0f, 0xaa, 0xca, 0x18, 0x04, 0xd7, 0x70, 0xdb, 0x2e, 0x0c, 0xff, 0x3e, 0x54, 0xf1,
	0x4a, 0x1c, 0xdd, 0xd9, 0x41, 0x4e, 0x7c, 0x83, 0x4a, 0x99, 0x67, 0xcc, 0x6e, 0x34, 0xf2, 0x54,
	0x0b, 0xfe, 0x7c, 0x66, 0x42, 0x8b, 0x7c, 0xef, 0x8a, 0x66, 0xef, 0x8a, 0x26, 0xe9, 0xe1, 0x95,
	0xdd, 0x3b, 0x77, 0xdd, 0x03, 0xfc, 0x41, 0x02, 0xa6, 0x54, 0x1c, 0x46, 0xfe, 0xd1, 0x18, 0xb8,
	0x6f, 0xc6, 0xe0, 0x97, 0x1a, 0x94, 0x3f, 0x12, 0xa0, 0x7d, 0x2e, 0x8c, 0x3f, 0xa6, 0x15, 0xf8,
	0x12, 0x54, 0x91, 0x69, 0x9d, 0x09, 0xee, 0x1b, 0xe1, 0x53, 0xc6, 0x40, 0x6b, 0xab, 0x55, 0xa0,
	0x45, 0xa9, 0x18, 0x44, 0xc9, 0xbb, 0xb5, 0xe3, 0xae, 0xbb, 0x8b, 0x77, 0xae, 0x3a, 0xce, 0x55,
	0x97, 0xae, 0xf0, 0x65, 0xa6, 0x4d, 0xe4, 0xae, 0xe2, 0x97, 0x7e, 0x74, 0xd0, 0xda, 0xe3, 0x77,
	0xf0, 0x2b, 0xb8, 0xbd, 0x4f, 0x75, 0xc6, 0x3a, 0xa5, 0x19, 0xbb, 0xce, 0x3a, 0xc2, 0x6f, 0x61,
	0xdc, 0x91, 0xd9, 0x03, 0x98, 0xd8, 0xcc, 0x1b, 0xeb, 0xce, 0xe6, 0xab, 0x0f, 0xc3, 0xa4, 0xf3,
	0x7e, 0xe7, 0x51, 0xd8, 0xe9, 0x1d, 0x84, 0x0f, 0xde, 0x7b, 0x74, 0x70, 0xdf, 0x77, 0x86, 0x5b,
	0xf8, 0xe5, 0xc5, 0xca, 0x16, 0xbe, 0xfe, 0x5c, 0x5d, 0xeb, 0xe4, 0xdc, 0x43, 0xa7, 0xe7, 0x1e,
	0xfa, 0xf3, 0xdc, 0x43, 0xdf, 0x4e, 0xbd, 0xd6, 0xaf, 0x53, 0x0f, 0x9d, 0x4c, 0x3d, 0x74, 0x3a,
	0xf5, 0x5a, 0xbf, 0x4f, 0xbd, 0xd6, 0x63, 0xa7, 0x8a, 0x87, 0xab, 0x76, 0xb7, 0xdf, 0xfd, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0xf1, 0x1f, 0x83, 0xed, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VirtualMachineClient is the client API for VirtualMachine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtualMachineClient interface {
	StartVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error)
	StopVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error)
	RestartVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error)
	PauseVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error)
	UnpauseVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error)
}

type virtualMachineClient struct {
	cc *grpc.ClientConn
}

func NewVirtualMachineClient(cc *grpc.ClientConn) VirtualMachineClient {
	return &virtualMachineClient{cc}
}

func (c *virtualMachineClient) StartVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error) {
	out := new(VMResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.debug.rpc.v2.VirtualMachine/StartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineClient) StopVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error) {
	out := new(VMResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.debug.rpc.v2.VirtualMachine/StopVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineClient) RestartVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error) {
	out := new(VMResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.debug.rpc.v2.VirtualMachine/RestartVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineClient) PauseVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error) {
	out := new(VMResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.debug.rpc.v2.VirtualMachine/PauseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineClient) UnpauseVM(ctx context.Context, in *VMRequest, opts ...grpc.CallOption) (*VMResponse, error) {
	out := new(VMResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.debug.rpc.v2.VirtualMachine/UnpauseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineServer is the server API for VirtualMachine service.
type VirtualMachineServer interface {
	StartVM(context.Context, *VMRequest) (*VMResponse, error)
	StopVM(context.Context, *VMRequest) (*VMResponse, error)
	RestartVM(context.Context, *VMRequest) (*VMResponse, error)
	PauseVM(context.Context, *VMRequest) (*VMResponse, error)
	UnpauseVM(context.Context, *VMRequest) (*VMResponse, error)
}

func RegisterVirtualMachineServer(s *grpc.Server, srv VirtualMachineServer) {
	s.RegisterService(&_VirtualMachine_serviceDesc, srv)
}

func _VirtualMachine_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.debug.rpc.v2.VirtualMachine/StartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).StartVM(ctx, req.(*VMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachine_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.debug.rpc.v2.VirtualMachine/StopVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).StopVM(ctx, req.(*VMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachine_RestartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).RestartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.debug.rpc.v2.VirtualMachine/RestartVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).RestartVM(ctx, req.(*VMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachine_PauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).PauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.debug.rpc.v2.VirtualMachine/PauseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).PauseVM(ctx, req.(*VMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachine_UnpauseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).UnpauseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.debug.rpc.v2.VirtualMachine/UnpauseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).UnpauseVM(ctx, req.(*VMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtualMachine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rafay.dev.debug.rpc.v2.VirtualMachine",
	HandlerType: (*VirtualMachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVM",
			Handler:    _VirtualMachine_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VirtualMachine_StopVM_Handler,
		},
		{
			MethodName: "RestartVM",
			Handler:    _VirtualMachine_RestartVM_Handler,
		},
		{
			MethodName: "PauseVM",
			Handler:    _VirtualMachine_PauseVM_Handler,
		},
		{
			MethodName: "UnpauseVM",
			Handler:    _VirtualMachine_UnpauseVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virtual_machine.proto",
}

func (m *VMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVirtualMachine(dAtA, i, uint64(m.RafayMeta.Size()))
	n1, err := m.RafayMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.VMName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVirtualMachine(dAtA, i, uint64(len(m.VMName)))
		i += copy(dAtA[i:], m.VMName)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVirtualMachine(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	return i, nil
}

func (m *VMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVirtualMachine(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	return i, nil
}

func encodeVarintVirtualMachine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RafayMeta.Size()
	n += 1 + l + sovVirtualMachine(uint64(l))
	l = len(m.VMName)
	if l > 0 {
		n += 1 + l + sovVirtualMachine(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovVirtualMachine(uint64(l))
	}
	return n
}

func (m *VMResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovVirtualMachine(uint64(l))
	}
	return n
}

func sovVirtualMachine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVirtualMachine(x uint64) (n int) {
	return sovVirtualMachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RafayMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RafayMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualMachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualMachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualMachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVirtualMachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVirtualMachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVirtualMachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualMachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVirtualMachine
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVirtualMachine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVirtualMachine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVirtualMachine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVirtualMachine
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVirtualMachine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVirtualMachine   = fmt.Errorf("proto: integer overflow")
)
